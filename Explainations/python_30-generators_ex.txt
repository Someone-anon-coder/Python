# Creating a function to count up to a specified number and yield each value
def count_up_to(num: int):
    """Count up to the specified number and yeild each value
    
    Args:
        num (int): The number to count up to.
        
    Yields:
        int: The current value of the counter."""

    count = 1
    while count <= num:

        # Number is yielded and state is saved
        yield count
        count += 1

# Creating a generator object
counter = count_up_to(5)

# Iterating through the generator object and printing each value
for num in counter:
    print(f"Number is {num}")


# Creating a generator with generator expression
generator_expression = ((x, x * x) for x in range(1, 6))

# Iterating through the generator and printing each value
for num, squared_num in generator_expression:
    print(f"Square of {num} is {squared_num}")


# Creating a generator object
counter = count_up_to(3)

try:
    print(next(counter))
    print(next(counter))
    print(next(counter))

    # Trying to call next again will raise StopIteration
    print(next(counter)) # Counter reached the end

# Catching the StopIteration exception
except StopIteration:
    print("End of iteration")


# Creating a generator object to count fibonacci numbers
def fibonacci(num: int):
    """Generate the first n Fibonacci numbers.
    Args:
        num (int): The number of Fibonacci numbers to generate.
    Yields:
        int: The next Fibonacci number."""
    
    a, b = 0, 1
    while num > 0:

        # Fibonacci number is yielded and state is saved
        yield a
        a, b = b, a + b
        num -= 1

# Creating a generator object
fib = fibonacci(10)

# Iterating through the generator and printing each value of fibonacci numbers
for num in fib:
    print(num, end=" ")
print()


# Creating a generator object
def echo():
    while True:
        
        # Getting a value and yielding it to the caller
        recieved = (yield)
        print(f"I received {recieved}")

# Creating a generator object
generator = echo()

# Calling next to start the generator
next(generator)

# Sending values to the generator
generator.send("Hello")
generator.send("World")


# Creating a generator object with a return statement
def count_up_to_fixed(num: int):
    """Count up to the specified number and yeild each value
    
    Args:
        num (int): The number to count up to.
        
    Yields:
        int: The current value of the counter."""

    count = 1
    while count <= num:

        # Number is yielded and state is saved
        yield count
        count += 1
    
    # If count is greater then StopIteration is raised
    return "Counting is Done"

# Creating a generator object
counter = count_up_to_fixed(3)

# Iterating through the generator and printing each value
print(f"Number is {next(counter)}")
print(f"Number is {next(counter)}")
print(f"Number is {next(counter)}")

# Trying to call next again will raise StopIteration
print(f"Number is {next(counter)}") # Counter reached the end