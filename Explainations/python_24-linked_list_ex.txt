# Creating a class to act as nodes in linked list
class SinglyNode:

    # Creating constructor with a parameter data and initializing next to None
    def __init__(self, data: any=None):
        self.data = data
        self.next = None

# Creating a class for singly linked list
class SinglyLinkedList:

    # Creating constructor to initialize head
    def __init__(self):
        self.head = None

    # Creating a method with 1 parameter to add a new node at the end of the linked list
    def append(self, data: any):
        new_node = SinglyNode(data)

        # Checking if the linked list is empty
        if not self.head:
            self.head = new_node
            return
        
        # Traversing the linked list to find the last node
        last = self.head
        while last.next:
            last = last.next
        
        # Adding the new node at the end of the linked list
        last.next = new_node
    
    # Creating a method to display the linked list
    def display(self):
        current = self.head
        
        # Traversing the linked list and printing the data of each node
        while current:
            print(current.data, end=" -> ")
            current = current.next
        
        # Printing None at the end of the linked list
        print("None")

# Creating an object of the class SinglyLinkedList
l1 = SinglyLinkedList()

# Adding nodes to the linked list
l1.append(1)
l1.append(2)
l1.append(3)

# Displaying the linked list
l1.display()


# Creating a class to act as a node in the doubly linked list
class DoublyNode:
    
    # Creating a constructor with a parameter data and initializing next and prev to None
    def __init__(self, data: any=None):
        self.data = data
        self.prev = None
        self.next = None

# Creating a class for doubly linked list
class DoublyLinkedList:
    
    # Creating a constructor to initialize head
    def __init__(self):
        self.head = None
    
    # Creating a method with 1 parameter to add a new node at the end of the linked list
    def append(self, data):
        new_node = DoublyNode(data)

        # Checking if the linked list is empty
        if not self.head:
            self.head = new_node
            return
        
        # Traversing the linked list to find the last node
        last = self.head
        while last.next:
            last = last.next
        
        # Adding the new node at the end of the linked list and updating the prev and next pointers
        last.next = new_node
        new_node.prev = last
    
    # Creating a method to display the linked list
    def display(self):
        current = self.head

        # Traversing the linked list and printing the data of each node
        while current:
            print(current.data, end=" <-> ")
            current = current.next
        
        # Printing None at the end of the linked list
        print("None")

# Creating an object of the class DoublyLinkedList
l2 = DoublyLinkedList()

# Adding nodes to the linked list
l2.append(10)
l2.append(20)
l2.append(30)

# Displaying the linked list
l2.display()


# Creating a class for circular linked list
class CurcularLinkedList():

    # Creating a constructor to initialize head
    def __init__(self):
        self.head = None

    # Creating a method with 1 parameter to add a new node at the end of the linked list
    def append(self, data:any):
        new_node = SinglyNode(data)

        # Checking if the linked list is empty
        if not self.head:
            self.head = new_node
            new_node.next = self.head
            return
        
        # Traversing the linked list to find the last node
        last = self.head

        # Adding the new node at the end of the linked list if the linked list is not empty
        while last.next != self.head:
            last = last.next
        
        # Adding the new node at the end of the linked list and updating the next pointer
        last.next = new_node
        new_node.next = self.head
    
    # Creating a method to display the linked list
    def display(self):
        current = self.head
        
        # Displaying the linked list until the head is reached
        while True:
            print(current.data, end=" -> ")
            current = current.next

            # Breaking the loop if the head is reached
            if current == self.head:
                break
        
        # Printing the head node at the end of the linked list
        print(f"Head ({self.head.data})")

# Creating an object of the class CurcularLinkedList
l3 = CurcularLinkedList()

# Adding nodes to the linked list
l3.append(100)
l3.append(200)
l3.append(300)

# Displaying the linked list
l3.display()